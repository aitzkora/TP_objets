#+OPTIONS: tex:t
* Équation de la chaleur
 Le but de ce TP est d'écrire une classe en C++ qui simulera l'équation de la chaleur sur un carré.
** Prolégomène mathématique
 L'équation que l'on souhaite résoudre est la suivante

  \partial_{t} u(x,t) = \Delta u(x,t)

avec les conditions aux bords

   u(x,t) = 1 

sur le domaine spatial [0,1]^2  et temporel [0,T]

En discretisant la dérivée en temps a l'ordre 1 par

   \partial_{t} u(x,t_{k}) \approx (u(x, t_{k} + dt) - u(x, t_{k}))/dt

et le laplacien grâce à
   
   \Delta u(x,y,t)  \approx  (u(x-h_{x}, y,t) + u(x+ h_{x}, y,t) - 2 
   u(x,y,t))/h_{x}^{2} + (u(x, y-h_{y},t) + u(x, y + h_{y},t) - 2 u(x,y,t))/h_{y}^{2}, 

On obtient la mise-à-jour matricielle suivante

   U^{n+1}_{i,j} =  w_{x} (U^{n}_{i-1, j} + U^{n}_{i+1, j} ) + w_{y} 
   (U^{n}_{i,j-1} + U^{n}_{i, j+1}) + d U^{n}_{i,j} 

ou les poids sont définis comme suit

   w_{x} = dt/h_{x}^{2} ,  w_{y} = dt/h_{y}^{2}  et  d = 1 - 2 w_{x} - 2 w_{y}

** Programme principal
  Pour cela on aimerait avoir un programme principal du genre
#+begin_src c++
#include "Chaleur.hpp"
#include <iostream>

using namespace std;
int main(int argc, char * argv[])
{
   if (argc < 4)
   {
     cerr << "usage "  <<argv[0] << " Nx Ny  maxIt prec" << endl;
     return -1;
   }
   int Nx = atoi(argv[1]);
   int Ny = atoi(argv[2]);
   double hx = 1. / Nx;
   double hy = 1. / Ny;
   double dt = min ( hx * hx / 4., hy * hy / 4.);
   int maxIt = atoi(argv[3]);
   double eps = atof(argv[4]);
   
   Chaleur poeleACharbon(hx, hy, Nx+2 , Ny + 2, dt);
   poeleACharbon.initialise(1.0);
   poeleACharbon.resout(maxIt, eps);
   return 0;
}
#+end_src
Après compilation, on pourrait appeler un tel programme avec la ligne de 
commande suivante
#+begin_src shell
./chaleur 100 100 1000 1e-6
#+end_src

La classe ~Chaleur~ aura donc /a minima/ l'interface suivante
#+begin_src c++
class Chaleur {
    public:
        Chaleur(double deltaX, double deltaY, int dimX, int dim, double dt);
        ~Chaleur();
        int resout(int maxIt, double eps);
        void initialise(double valSurLeBord);
};
#+end_src

*** Constructeur
On pourra définir affecter les membres dans le constructeur grâce à une /liste d'initalisation/

#+begin_src c++
Chaleur::Chaleur(double deltaX, double deltaY, int dimX, int dimY, double dt):
     _deltaX(deltaX),
     _deltaY(deltaY),
     _dimX(dimX),
     _dimY(dimY),
     _dt(dt)
{
  //blah
}
#+end_src
Notons que ce code est quasi équivalent à
#+begin_src c++
Chaleur::Chaleur(double deltaX, double deltaY, int dimX, int dimY, double dt)
{
  _deltaX = deltaX;
  _deltaY = deltaY;
  _dimX = dimX;
  _dimY = dimY;
  _dt = dt;
}
#+end_src
Dans le deuxieme cas on parle d'affectation et pas d'initialisation. Pour des 
types non-atomiques, il y a une grosse différence, mais ici ce n'est pas très 
important...

*** Méthode de résolution
La méthode =resout= implémentera la boucle en temps limitée par un nombre 
maximum d'itérations et une précision donnée. On pourra utiliser une boucle =while=
#+begin_src c++
int Chaleur::resout(int maxIt, double eps)
{
  int iter = 0;
  double err = 100;
  // boucle en temps
  while ((iter < maxIt) && (err > eps))
  {
    // mise-a-jour en espace
  }
  return iter;
}
#+end_src
Pour simplifier l'ecriture de la méthode =resout= on pourra écrire une méthode 
interne qui calcule l'iteréé suivante =_solNp1= à partir de de =_solN=
ainsi que l'erreur entre ces deux iterées

  e_{i} = \sqrt ( \sum_{i,j} (U^{n+1}_{i,j} -U^{n}_{i,j} )^{2})
 
La méthode =initialise= se contentera quant à elle de mettre une valeur
constante sur le bord du carré et zéro partout ailleurs.
** Implémentation interne
  La spécification de l'interface ne précise évidemment pas comment implanter 
  les itérées succésifs des solutions. Pour cela on peut utiliser plusieurs 
  méthodes
*** les pointeurs
  On alloue un =double*= de la taille de la grille (tailleX * tailleY) dans le 
  constructeur
#+begin_src c++
Chaleur::Chaleur(...)
{
...
   _sol =  new double [_dimX * _dimY];
...
}

Chaleur::~Chaleur()
{
    delete [] _sol;
}
#+end_src

*** soit un vector<double> de la STL
#+begin_src c++
std::vector<double> _sol;
#+end_src
*** Stockage plat
Dans les deux cas, on aura interet a utiliser un stockage plat, car les 
pointeurs de pointeurs ou les vecteurs de vecteurs sont lents en mémoire 
et les tableaux bidimensionels `double [DIM1][DIM2]` nécessitent quand a eux de 
connaître leur taille à la compilation
** Sauvegarde de la solution
   Suivant un nombre régulier d'opérations, on pourra sauvegarder la solution 
   dans un fichier vtk en utilisant le preambule suivant
#+begin_src c++
void Chaleur::sauveSolution(string nomFichier)
{
  ofstream file;
  file.open(nomFichier, ios::out);

  file << "# vtk DataFile Version 3.0" << endl;
  file << "cell" << endl;
  file << "ASCII" << endl;
  file << "DATASET STRUCTURED_POINTS" << endl;
  file << "DIMENSIONS " << _dimX << " " << _dimY << " " << 1 << endl;
  file << "ORIGIN " << 0 << " " << 0 << " " << 0 << endl;
  file << "SPACING " << 1.0 << " " << 1.0 << " " << 1 << endl;;
  file << "POINT_DATA " << _dimX*_dimY << endl;
  file << "SCALARS cell float" << endl;
  file << "LOOKUP_TABLE default" << endl;
 
  // rajouter ici l'écriture des données
  // qui peuvent être écrites directement sur une seule ligne

  file << endl;
  file.close();
}
#+end_src 
